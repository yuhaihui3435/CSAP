package com.yhh.csap.mt;


import com.yhh.csap.Consts;
import com.yhh.csap.admin.model.Taxonomy;
import com.yhh.csap.mt.base.BaseDoctorInfo;

import javax.print.Doc;
import java.util.List;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class DoctorInfo extends BaseDoctorInfo<DoctorInfo> {
	public static final DoctorInfo dao = new DoctorInfo().dao();


	/**
	 * 擅长疾病分类
	 * @return
	 */
	public List<DoctorTax> getDT_A(){
		return DoctorTax.dao.findByCache(Consts.CACHE_NAMES.doctorTax.name(),"dt_a_".concat(getId().toString()),"select * from mt_doctor_tax where dId=? and type=1",getId());
	}
	/**
	 * 手术方式
	 * @return
	 */
	public List<DoctorTax> getDT_B(){
		return DoctorTax.dao.findByCache(Consts.CACHE_NAMES.doctorTax.name(),"dt_b_".concat(getId().toString()),"select * from mt_doctor_tax where dId=? and type=2",getId());
	}

	/**
	 * 职称
	 * @return
	 */
	public List<DoctorTax> getDT_C(){
		return DoctorTax.dao.findByCache(Consts.CACHE_NAMES.doctorTax.name(),"dt_c_".concat(getId().toString()),"select * from mt_doctor_tax where dId=? and type=3",getId());
	}

	public String getDT_A_IDS(){
		List<DoctorTax> list=getDT_A();
		StringBuilder stringBuilder=new StringBuilder();
		for (DoctorTax doctorTax:list){
			if(stringBuilder.length()==0){
				stringBuilder.append(doctorTax.getTaxId().toString());
			}else{
				stringBuilder.append(",").append(doctorTax.getTaxId().toString());
			}
		}
		return stringBuilder.toString();
	}


	public String getDT_B_IDS(){
		List<DoctorTax> list=getDT_B();
		StringBuilder stringBuilder=new StringBuilder();
		for (DoctorTax doctorTax:list){
			if(stringBuilder.length()==0){
				stringBuilder.append(doctorTax.getTaxId().toString());
			}else{
				stringBuilder.append(",").append(doctorTax.getTaxId().toString());
			}
		}
		return stringBuilder.toString();
	}


	public String getDT_C_IDS(){
		List<DoctorTax> list=getDT_C();
		StringBuilder stringBuilder=new StringBuilder();
		for (DoctorTax doctorTax:list){
			if(stringBuilder.length()==0){
				stringBuilder.append(doctorTax.getTaxId().toString());
			}else{
				stringBuilder.append(",").append(doctorTax.getTaxId().toString());
			}
		}
		return stringBuilder.toString();
	}



	public List<DoctorInfo> findTop(int limit){
		String sql="select * from ".concat(getTableName()).concat(" where dAt is null and ifTop='0' limit ").concat(Integer.toString(limit));
		return dao.findByCache(Consts.CACHE_NAMES.index.name(),"drList",sql);
	}

	public String getSexTxt(){

		return getSex()==1?"男":"女";
	}

	public String getStatusTxt(){
		return getStatus().equals(Consts.STATUS.enable.getVal())?Consts.STATUS.enable.getValTxt():Consts.STATUS.forbidden.getValTxt();
	}

	@Override
	public String getTableName() {
		return "mt_doctor_info";
	}
}
