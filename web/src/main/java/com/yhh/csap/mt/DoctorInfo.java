package com.yhh.csap.mt;


import cn.hutool.core.bean.BeanUtil;
import cn.hutool.core.collection.CollectionUtil;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.jfinal.plugin.ehcache.CacheKit;
import com.yhh.csap.Consts;
import com.yhh.csap.admin.model.Taxonomy;
import com.yhh.csap.mt.base.BaseDoctorInfo;

import javax.print.Doc;
import java.util.*;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class DoctorInfo extends BaseDoctorInfo<DoctorInfo> {
	public static final DoctorInfo dao = new DoctorInfo().dao();


	/**
	 * 擅长疾病分类
	 * @return
	 */
	public List<DoctorTax> getDT_A(){
		return DoctorTax.dao.findByCache(Consts.CACHE_NAMES.doctorTax.name(),"dt_a_".concat(getId().toString()),"select * from mt_doctor_tax where dId=? and type=1",getId());
	}
	/**
	 * 手术方式
	 * @return
	 */
	public List<DoctorTax> getDT_B(){
		return DoctorTax.dao.findByCache(Consts.CACHE_NAMES.doctorTax.name(),"dt_b_".concat(getId().toString()),"select * from mt_doctor_tax where dId=? and type=2",getId());
	}

	/**
	 * 职称
	 * @return
	 */
	public List<DoctorTax> getDT_C(){
		return DoctorTax.dao.findByCache(Consts.CACHE_NAMES.doctorTax.name(),"dt_c_".concat(getId().toString()),"select * from mt_doctor_tax where dId=? and type=3",getId());
	}


	public String getDTAStr(){
		StringBuilder stringBuilder=new StringBuilder();
		List<DoctorTax> doctorTaxes=getDT_A();
		for (DoctorTax doctorTax:doctorTaxes){
			if (stringBuilder.length()==0)
				stringBuilder.append(doctorTax.getTax().getTitle());
			else
				stringBuilder.append(",").append(doctorTax.getTax().getTitle());
		}
		return  stringBuilder.toString();
	}
	public String getDTBStr(){
		StringBuilder stringBuilder=new StringBuilder();
		List<DoctorTax> doctorTaxes=getDT_B();
		for (DoctorTax doctorTax:doctorTaxes){
			if (stringBuilder.length()==0)
				stringBuilder.append(doctorTax.getTax().getTitle());
			else
				stringBuilder.append(",").append(doctorTax.getTax().getTitle());
		}
		return  stringBuilder.toString();
	}
	public String getDTCStr(){
		StringBuilder stringBuilder=new StringBuilder();
		List<DoctorTax> doctorTaxes=getDT_C();
		for (DoctorTax doctorTax:doctorTaxes){
			if (stringBuilder.length()==0)
				stringBuilder.append(doctorTax.getTax().getTitle());
			else
				stringBuilder.append(",").append(doctorTax.getTax().getTitle());
		}
		return  stringBuilder.toString();
	}

	public String getDT_A_IDS(){
		List<DoctorTax> list=getDT_A();
		StringBuilder stringBuilder=new StringBuilder();
		for (DoctorTax doctorTax:list){
			if(stringBuilder.length()==0){
				stringBuilder.append(doctorTax.getTaxId().toString());
			}else{
				stringBuilder.append(",").append(doctorTax.getTaxId().toString());
			}
		}
		return stringBuilder.toString();
	}


	public String getDT_B_IDS(){
		List<DoctorTax> list=getDT_B();
		StringBuilder stringBuilder=new StringBuilder();
		for (DoctorTax doctorTax:list){
			if(stringBuilder.length()==0){
				stringBuilder.append(doctorTax.getTaxId().toString());
			}else{
				stringBuilder.append(",").append(doctorTax.getTaxId().toString());
			}
		}
		return stringBuilder.toString();
	}


	public String getDT_C_IDS(){
		List<DoctorTax> list=getDT_C();
		StringBuilder stringBuilder=new StringBuilder();
		for (DoctorTax doctorTax:list){
			if(stringBuilder.length()==0){
				stringBuilder.append(doctorTax.getTaxId().toString());
			}else{
				stringBuilder.append(",").append(doctorTax.getTaxId().toString());
			}
		}
		return stringBuilder.toString();
	}



	public List<DoctorInfo> findTop(int limit){
		String sql="select * from ".concat(getTableName()).concat(" where dAt is null and ifTop='0' limit ").concat(Integer.toString(limit));
		return dao.findByCache(Consts.CACHE_NAMES.index.name(),"drList",sql);
	}

	public String getSexTxt(){
		return getSex()==1?"男":"女";
	}

	public List<DoctorVisitApi> getVisitApi(){
		return DoctorVisitApi.dao.findByCache(Consts.CACHE_NAMES.doctorVisit.name(),"visitApi_"+getId(),"select * from mt_doctor_visit_api where drId=?",getId());
	}

	public String getVisitApiStr(){
		return JSON.toJSONString(getVisitApi());
	}




	public String getVisitTop5(){
		List<Map> ret=new ArrayList<>();
		Map<String,Object> map=null;
		Set<Map.Entry<String,Object>> set=null;
		List<DoctorVisit> list=DoctorVisit.dao.findByDIdAndLimitRecentCache(getId(),5);
		for(DoctorVisit doctorVisit:list){
			set=doctorVisit._getAttrsEntrySet();
			map=new HashMap<>();
			for(Map.Entry entry:set){
				map.put((String)entry.getKey(),entry.getValue());
			}
			map.put("hospTxt",doctorVisit.getHospTxt());
			ret.add(map);
		}
		return JSON.toJSONString(ret,SerializerFeature.WriteNullStringAsEmpty);
	}

	public List<DoctorVisit> getVisitObjTop5(){
		List<DoctorVisit> list=DoctorVisit.dao.findByDIdAndLimitRecentCache(getId(),5);
		return list;
	}

	public String getStatusTxt(){
		return getStatus().equals(Consts.STATUS.enable.getVal())?Consts.STATUS.enable.getValTxt():Consts.STATUS.forbidden.getValTxt();
	}

	public String getHospTxt(){
		return getHospital()==null?"无":((Taxonomy)CacheKit.get(Consts.CACHE_NAMES.taxonomy.name(),getHospital().toString())).getTitle();
	}


	@Override
	public String getTableName() {
		return "mt_doctor_info";
	}
}
